-Unclosed quotes

Double consecutives operators tokens

Double file ?

Double EOF ?

âœ…
ðŸš«
EDGE CASES :

1 / Chaos inputs

||||||||||||||||| ==> ðŸš«
<> ==> ðŸš«
>< ==> ðŸš«
only operators tokens, whatever the combinaison ==> ðŸš«
wjrgberg | wrjugerik | iurwjgkier ==> âœ… (each token is treated as a command, minishell needs to trows errors like :)

bash: wrjugerik: command not found...
bash: iurwjgkier: command not found...
bash: wjrgberg: command not found...



1 / Firt token is operators : 

| 		ex : 	| something      ==> ðŸš« (First token is pipe ==> will fail 100% whatever comes next)

> 		ex : 	> test    ==> âœ… (create an empty file called `test`, erase its content if it does exists) 
> 		ex : 	> test | echo bonjour    ==> âœ… (create an empty file called `test`, erase its content if it does exists, outputs `bonjour`) 
> 		ex : 	> echo bonjour   ==> ðŸš« (treated as two consecutives files)
> 		ex : 	echo bonjour >  ==> ðŸš« (needs a file)
> 		ex : 	echo bonjour > |  ==> ðŸš« (unexpected token pipe)


>>		ex :	>> test ==> âœ… (create an empty file called `test`, DOES NOT erase his content if it does exists)
>>		ex :	>> test | echo bonjour ==> âœ… (create an empty file called `test`, DOES NOT erase its content if it does exists + outputs `bonjour`)
>> 		ex : 	>> echo bonjour   ==> ðŸš« (treated as two consecutives files)
>> 		ex : 	echo bonjour >>  ==> ðŸš« (needs a file)
>> 		ex : 	echo bonjour >> |  ==> ðŸš« (unexpected token pipe)

>> 		ex : 	> echo bonjour | rev | >> test ==> ðŸš« (treated as two consecutives files)
>> 		ex : 	>> echo bonjour | rev | >> test ==> ðŸš« (treated as two consecutives files)
>> 		ex : 	echo bonjour | rev | >> test ==> âœ… (create an empty file called `test`, DOES NOT erase his content if it does exists, outputs NOTHING)
>> 		ex : 	echo bonjour | rev | >> test | echo bonjour ==> âœ… (create an empty file called `test`, DOES NOT erase his content if it does exists, outputs `bonjour` from the second echo)



< 		ex : 	< test ==> âœ… (if file exists (even with chmod 000), does nothing)
< 		ex : 	< test not_existing_file ==> âœ… (if file exists (even with chmod 000), does nothing)
< 		ex : 	< test | echo bonjour ==> âœ… (outputs `bonjour`)
< 		ex : 	< not_existing_file ==> ðŸš« (fails)
< 		ex : 	< not_existing_file | echo bonjour ==> ðŸš« (fails, openning a waiting prompt)
< 		ex : 	< test ==> ðŸš« (if file DOES NOT EXISTS, command fails)
< 		ex : 	< test | echo bonjour ==> âœ… (if file `test` exists, output `bonjour`)
< 		ex : 	< wlrgnjbedkrtfn | echo bonjour ==> âœ… (open a here_doc like where any command will be executed)

==> âœ…
==> ðŸš«

<<		ex :	<<  test | echo bonjour | rev ==> âœ… (outputs `ruojnob`) 
<< 		ex : 	<<  wlrgnjbedkrtfn | echo bonjour ==> âœ… (open a here_doc like where any command will be executed)
<<		ex :	<< EOF wrigjeriju | echo bonjour  ==> âœ… (open an here_doc until EOF, then execute `echo bonjour`, but `wrigjeriju` isn't necessary executed)

All << as first case will execute whatsoever


2 >
MIND-WRECKING CASES :

echo $0 ==> Outputs `bash`

echo $SHELL | rev > test test test test ==> creates `test` file with nothing on it. The command erase if `test` exists.

echo $? ==> output last exist_status

Check chaotic input like njbhgvfcdxfvghbnjkm8l,



